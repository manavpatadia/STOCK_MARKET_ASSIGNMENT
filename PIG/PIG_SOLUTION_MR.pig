--SYMBOL,
--SERIES,
--OPEN,
--HIGH,
--LOW,
--CLOSE,
--LAST,
--PREVCLOSE,
--TOTTRDQTY,
--TOTTRDVAL,
--TIMESTAMP,
--TOTALTRADES,
--ISIN

--hdfs dfs -mkdir /STOCK_MARKET_ASSIGNMENT
--hdfs dfs -mkdir /STOCK_MARKET_ASSIGNMENT/OUTPUT
--hdfs dfs -mkdir /STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/
--hdfs dfs -mkdir /STOCK_MARKET_ASSIGNMENT/INPUT
--hdfs dfs -put /home/manav/Documents/STOCK_MARKET_ASSIGNMENT/DATA/STOCK_MARKET_DS.csv /STOCK_MARKET_ASSIGNMENT/INPUT/
STOCK = LOAD 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/INPUT/' USING PigStorage(',') AS ( SYMBOL:CHARARRAY, SERIES:CHARARRAY, OPEN:DOUBLE, HIGH:DOUBLE, LOW:DOUBLE, CLOSE:DOUBLE, LAST:DOUBLE, PREVCLOSE:DOUBLE, TOTTRDQTY:DOUBLE, TOTTRDVAL:DOUBLE, TIMESTAMP:CHARARRAY, TOTALTRADES:INT, ISIN:CHARARRAY);

--Q1 Use the given csv file as input data and implement following transformations:
--Filter Rows on specified criteria "Symbol equals GEOMETRIC"
--Select specific columns from those available: SYMBOL, OPEN, HIGH, LOW and CLOSE which meets above criteria
--Generate count of the number of rows from above result


--1.1
FILTER_DATA = FILTER STOCK BY SYMBOL == 'GEOMETRIC';
STORE FILTER_DATA INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/1_1/' USING PigStorage (',');

--1.2
IMP_COL = FOREACH FILTER_DATA GENERATE SYMBOL, OPEN, HIGH, LOW, CLOSE;
STORE IMP_COL INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/1_2/' USING PigStorage (',');

--1.3
GROUP_ALL = GROUP IMP_COL ALL;
COUNT_FILTERED= FOREACH GROUP_ALL GENERATE COUNT(IMP_COL.SYMBOL) AS (COUNT_GEO:LONG);
STORE COUNT_FILTERED INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/1_3/' USING PigStorage (',');

--Q2 Calculation of various statistical quantities and decision making:
--Only lines with value "EQ" in the "series" column should be processed. As the first stage, filter out all the lines that do not fulfil this criteria.
--For every stock, for every year, calculate the statistical parameters(min, max, mean and standard deviation)  and store the generated information in properly designated tables.

--2.1
STOCK = LOAD 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/INPUT/' USING PigStorage(',') AS ( SYMBOL:CHARARRAY, SERIES:CHARARRAY, OPEN:DOUBLE, HIGH:DOUBLE, LOW:DOUBLE, CLOSE:DOUBLE, LAST:DOUBLE, PREVCLOSE:DOUBLE, TOTTRDQTY:DOUBLE, TOTTRDVAL:DOUBLE, TIMESTAMP:CHARARRAY, TOTALTRADES:INT, ISIN:CHARARRAY);
FILTER_DATA = FILTER STOCK BY SERIES == 'EQ';
STORE FILTER_DATA INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/2_1/' USING PigStorage (',');
--2.2
GROUP_SYMBOL_YEAR = GROUP FILTER_DATA BY (SYMBOL, SUBSTRING(TIMESTAMP,0,4));
STATS_ALL = FOREACH GROUP_SYMBOL_YEAR { 
    MINIMUM = MIN(FILTER_DATA.CLOSE);
    MAXIMUM = MAX(FILTER_DATA.CLOSE);
    MEAN = AVG(FILTER_DATA.CLOSE);
    CNT = COUNT(FILTER_DATA.CLOSE);
    CSQ = FOREACH FILTER_DATA GENERATE CLOSE * CLOSE AS (CC:DOUBLE);
    GENERATE group.$0 AS (SYMBOL:CHARARRAY), MINIMUM AS (MIN:DOUBLE), MAXIMUM AS (MAX:DOUBLE), ROUND_TO(MEAN,6) AS (MEAN:DOUBLE), ROUND_TO(SQRT(SUM(CSQ.CC) / (CNT * 1.0) - (MEAN * MEAN)),6) AS (STDDEV:DOUBLE), group.$1 AS (YEAR:INT);
};
SORT_STATS = ORDER STATS_ALL BY SYMBOL, YEAR DESC;
STORE SORT_STATS INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/2_2/' USING PigStorage (',');

STATS = FOREACH GROUP_SYMBOL_YEAR { 
    MINIMUM = MIN(FILTER_DATA.CLOSE);
    MAXIMUM = MAX(FILTER_DATA.CLOSE);
    MEAN = AVG(FILTER_DATA.CLOSE);
    CNT = COUNT(FILTER_DATA.CLOSE);
    CSQ = FOREACH FILTER_DATA GENERATE CLOSE * CLOSE AS (CC:DOUBLE);
    GENERATE group.$0 AS (SYMBOL:CHARARRAY), group.$1 AS (YEAR:INT), MINIMUM AS (MIN:DOUBLE), MAXIMUM AS (MAX:DOUBLE), ROUND_TO(MEAN,6) AS (MEAN:DOUBLE), CNT * 1.0 AS (CNT:DOUBLE), ROUND_TO(SUM(CSQ.CC),4) AS (SUM_CSQ:DOUBLE);
};
ALL_STATS = FOREACH STATS GENERATE $0, $1, $2, $3, $4, ROUND_TO((($6 / $5) - ($4 * $4)),6) AS (STDDEV:DOUBLE);
SORT_STATS = ORDER ALL_STATS BY SYMBOL, YEAR DESC;
STORE SORT_STATS INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/2_2/' USING PigStorage (',');


--Q3 Select any year for which data is available:
--For the selected year, create a table that contains data only for those stocks that have an average total traded quntity of 3 lakhs or more per day. Print out the first 25 entries of the table and submit.
--From among these, select any 10 stocks from IT ('HCLTECH', 'NIITTECH', 'TATAELXSI','TCS', 'INFY', 'WIPRO', 'DATAMATICS','TECHM','MINDTREE' and 'OFSS') and create a table combining their data.
--Find out the Pearsons Correlation Coeffecient for every pair of stocks you have selected. Final output should be in decreasing order of the coeffecient. 

--3.1
FILTER_DATA = FILTER STOCK BY TOTTRDQTY >= 300000 AND SUBSTRING(TIMESTAMP,0,4) == '2017';
LIMIT_DATA = LIMIT FILTER_DATA 25;
STORE LIMIT_DATA INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/3_1/' USING PigStorage (',');

--3.2
ITSTOCK = FILTER FILTER_DATA BY SYMBOL IN ('HCLTECH', 'NIITTECH', 'TATAELXSI','TCS', 'INFY', 'WIPRO', 'DATAMATICS','TECHM','MINDTREE', 'OFSS');
STORE ITSTOCK INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/3_2/' USING PigStorage (',');

--3_3
--CREATE TABLE ITSTOCKS SORTED WITH CROSS JOINS FOR CORR CALCULATION

STOCK = LOAD 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/INPUT/' USING PigStorage(',') AS ( SYMBOL:CHARARRAY, SERIES:CHARARRAY, OPEN:DOUBLE, HIGH:DOUBLE, LOW:DOUBLE, CLOSE:DOUBLE, LAST:DOUBLE, PREVCLOSE:DOUBLE, TOTTRDQTY:DOUBLE, TOTTRDVAL:DOUBLE, TIMESTAMP:CHARARRAY, TOTALTRADES:INT, ISIN:CHARARRAY);
FILTER_DATA = FILTER STOCK BY TOTTRDQTY >= 300000 AND SUBSTRING(TIMESTAMP,0,4) == '2017';
ITSTOCK1 = FILTER FILTER_DATA BY SYMBOL IN ('HCLTECH', 'NIITTECH', 'TATAELXSI','TCS', 'INFY', 'WIPRO', 'DATAMATICS','TECHM','MINDTREE', 'OFSS');
ITSTOCK2 = FILTER FILTER_DATA BY SYMBOL IN ('HCLTECH', 'NIITTECH', 'TATAELXSI','TCS', 'INFY', 'WIPRO', 'DATAMATICS','TECHM','MINDTREE', 'OFSS');
ITSTOCK_1_2 = JOIN ITSTOCK1 BY $10, ITSTOCK2 BY $10;
FLTR = FILTER ITSTOCK_1_2 BY $0 > $13;
GROUP_SYMBOL = GROUP FLTR BY ($0, $13);
CORITSTOCK = FOREACH GROUP_SYMBOL { 
    CNT = COUNT(FLTR.$0);
    SC = FOREACH FLTR GENERATE $5 AS (CLOSE1:DOUBLE), $18 AS (CLOSE2:DOUBLE), $5 * $5 AS (CC1:DOUBLE), $18 * $18 AS (CC2:DOUBLE), $5 * $18 AS (C1C2:DOUBLE);
    GENERATE group.$0 AS (SYMBOL1:CHARARRAY), group.$1 AS (SYMBOL2:CHARARRAY), SUM(SC.CLOSE1) AS (SUM1:DOUBLE), SUM(SC.CLOSE2)  AS (SUM2:DOUBLE), SUM(SC.CC1) AS (SUM1SQ:DOUBLE), SUM(SC.CC2) AS (SUM2SQ:DOUBLE), SUM(SC.C1C2) AS (PSUM:DOUBLE), CNT * 1.0 AS (N:DOUBLE), FLTR.$10 AS T;
};
CORITSTOCK_SORT = ORDER CORITSTOCK BY SYMBOL1, SYMBOL2, T;
PEARSONCORITSTOCK = FOREACH CORITSTOCK GENERATE SYMBOL1, SYMBOL2, ROUND_TO((PSUM - (SUM1 * SUM2 / N)) / SQRT((SUM1SQ - (SUM1 * SUM1) / N) * (SUM2SQ - (SUM2 * SUM2) / N)),8) AS (PEARSONCOEFFICIENT:DOUBLE);
PEARSONCORITSTOCK_SORT = ORDER PEARSONCORITSTOCK BY PEARSONCOEFFICIENT DESC;
STORE PEARSONCORITSTOCK_SORT INTO 'hdfs://localhost:9000/STOCK_MARKET_ASSIGNMENT/OUTPUT/PIG/3_3/' USING PigStorage (',');
